#+options: num:nil toc:nil
#+TITLE:  Useful Lisp macros
#+AUTHOR: Henry Steere
#+REVEAL_THEME: black

* Introduction to macros

  This is code

  #+begin_src lisp
  (defun add1 (x) (+ x 1))
  #+end_src

  This is a list

  #+begin_src lisp
  '(defun add1 (x) (+ x 1))
  #+end_src

  Macros generate code for the compiler

  #+begin_src lisp
  (defmacro define-add1 ()
    '(defun add1 (x) (+ x 1)))
  #+end_src

* Useful macros

  Threading passes arguments easily

  #+begin_src lisp
    (<- val (fun1 a) (fun2 b) (fun3 c))
  #+end_src

  Anaphora refer to expressions concisely

  #+begin_src lisp
    (aif (gethash (expression-returning-key) table)
         (+ it 10)
         5)
  #+end_src

  Reader macros add syntax

  #+begin_src lisp
  #f(+ %1 %2)
  #+end_src

* Threading

  Passing results can be cumbersome

  #+begin_src lisp
  (fun3 (fun2 (fun1 1) 2 3) 4 5)
  #+end_src

  Clojure uses threading
  
  #+begin_src clojure
  (<- (fun1 1) (fun2 2 3) (fun3 4 5))
  #+end_src

** Add it
  
   Transform the code with a function

  #+begin_src lisp
    (defun thread-first (exps)
      (reduce (lambda (a b) (cons (car b) (cons a (cdr b)))) exps))

    ;CL-USER> (thread-first '((fun1 1) (fun2 2 3) (fun3 4 5)))
    ;(FUN3 (FUN2 (FUN1 1) 2 3) 4 5)
  #+end_src

  Define the macro

  #+begin_src lisp
    (defmacro -> (&rest exps)
      (thread-first exps))
  #+end_src

** Thread the last argument
  
  Thread last passes the result as the last argument

  #+begin_src lisp
  (->> (fun1 1) (fun2 2 3) (fun3 4 5))
  #+end_src

  is the same as 

  #+begin_src lisp
  (fun3 4 5 (fun2 2 3 (fun1 1)))
  #+end_src

  #+begin_src lisp
    (defmacro ->> (&rest exps)
      (reduce (lambda (a b) (append b (list a))) exps))
  #+end_src

** Thread arbitrary positions

  We may want to pass results to arbitrary positions

  #+begin_src lisp
    (-?> (fun1 1) (fun2 2 ? ? 3) (fun3 ? 4 ? 5))
  #+end_src

  should be the same as 
  
  #+begin_src lisp
    (let ((res2 (let ((res1 (fun1 1)))
                  (fun2 2 res1 res1 3))))
      (fun3 res2 4 res2 5))
  #+end_src

** Unique symbols

  Generate unique symbols with ~gensym~

  #+begin_src lisp
    (defun bind-subst (in-exp subst-exp)
      (let ((res (gensym)))
        `(let ((,res ,in-exp))
           ,(subst res '? subst-exp))))
    (defmacro -?> (&rest exps)
      (reduce #'bind-subst exps))
  #+end_src

  Check the results

  #+begin_src lisp
    ; CL-USER> (macroexpand '(-?> (fun1 1) 
    ;             (fun2 2 ? ? 3)
    ;             (fun3 ? 4 ? 5)))
    ; (LET ((#:G526
    ;        (LET ((#:G525 (FUN1 1)))
    ;          (FUN2 2 #:G525 #:G525 3))))
    ;   (FUN3 #:G526 4 #:G526 5))    
  #+end_src

* Anaphora

  Use anaphora to concisely refer to expressions

  #+begin_src lisp
    (aif (gethash key table)
         (use-value it)
         (use-another-value 5))
  #+end_src

  ~it~ is the anaphor

** Implementation

   Bind the result of the expression to an injected symbol called it

   #+begin_src lisp
     (defmacro aif (exp true-branch false-branch)
       `(let ((it ,exp))
          (if it ,true-branch ,false-branch)))
   #+end_src

** Multiple evaluation of anaphora

   What if you want to set a value in a hash table

   #+begin_src lisp
     (sif (gethash key table)
          (incf it 10)
          (setf it 0))
   #+end_src

   Use symbol anaphora with symbol-macrolet

   #+begin_src lisp
     (defmacro sif (exp true-branch false-branch)
       `(symbol-macrolet ((it ,exp))
          (if it ,true-branch ,false-branch)))
   #+end_src

* Reader macros

  The shorter lambda syntax

  #+begin_src lisp
    (reduce #f(- %2 %1) '(1 2 3))
  #+end_src

  should be transformed to 

  #+begin_src lisp
    (reduce (lambda (%1 %2) (- %2 %1)) '(1 2 3))
  #+end_src

** The macro

   A helper

   #+begin_src lisp
     (defmacro expand-lambda (exp)
       `(let ((args (find-args ,exp)))
          `(lambda ,args ,exp)))
   #+end_src

   The reader

   #+begin_src lisp
     (defun |#f-reader| (stream subchar arg)
       (declare (ignore subchar arg))
       (let ((exp (read stream)))
         (expand-lambda exp)))

     (set-dispatch-macro-character #\# #\f #'|#f-reader|)
   #+end_src

** More reader macros

   Function annotations

   #+begin_src lisp
     @memoize
     (defun change (coins total)
       (cond ((< total 0) 0)
             ((= total 0) 1)
             ((null coins) 0)
             (t (+ (change coins (- total (car coins)))
                   (change (cdr coins) total)))))
   #+end_src
   
   Roman numeral literals

   #+begin_src lisp
     #rCXXIX
     ;; CL-USER> #rCXXIX
     ;; 129
   #+end_src
