#+TITLE:  Useful Lisp macros
#+AUTHOR: Henry Steere

* A brief introduction to macros

  This is code defining a function

  #+begin_src lisp
  (defun add1 (x) (+ x 1))
  #+end_src

  This is a list

  #+begin_src lisp
  '(defun add1 (x) (+ x 1))
  #+end_src

  Macros are functions that generate code for the compiler

  #+begin_src lisp
  (defmacro define-add1 ()
    '(defun add1 (x) (+ x 1)))
  #+end_src

* Clojure threading macros

  Passing the results from one function to the next can be cumbersome

  #+begin_src lisp
  (fun3 (fun2 (fun1 1) 2 3) 4 5)
  #+end_src

  Clojure uses threading syntax for this, but Lisp doesn't
  
  #+begin_src clojure
  (<- (fun1 1) (fun2 2 3) (fun3 4 5))
  #+end_src

* Adding it to Lisp
  
  First define a helper function

  #+begin_src lisp
    (defun thread-first (exps)
      (reduce (lambda (a b) (cons (car b) (cons a (cdr b)))) exps))
    CL-USER> (thread-last '((fun1 1) (fun2 2 3) (fun3 4 5)))
    (FUN3 (FUN2 (FUN1 1) 2 3) 4 5)
  #+end_src

  Then define the macro

  #+begin_src lisp
    (defmacro -> (&rest exps)
      (nest-evaluation exps))
  #+end_src

* Threading the last argument
  
  Thread last passes the result as the last argument to a function.

  #+begin_src lisp
  (->> (fun1 1) (fun2 2 3) (fun3 4 5))
  #+end_src

  is the same as 

  #+begin_src lisp
  (fun3 4 5 (fun2 2 3 (fun1 1)))
  #+end_src

  #+begin_src lisp
  
  #+end_src
